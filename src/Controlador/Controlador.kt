package Controlador

import Modelo.Carrito
import Modelo.Producto
import Vista.Vista
import Modelo.obtenerProductos

object Controlador {
    private val carrito = Carrito()
    private val productos = obtenerProductos()
// M√©todo principal que inicia la aplicaci√≥n
    fun iniciar() {
        mostrarMenuPrincipal()
    }
    // Men√∫ principal de la aplicaci√≥n
    private fun mostrarMenuPrincipal() {
        while (true) {
            // Se muestra el men√∫ con opciones
            Vista.mostrarMensaje(
                """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë             üíª Venta loka de Compus S.A de C.V üíª            ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë   [1] üñ•Ô∏è Ver Productos                                       ‚ïë
‚ïë   [2] üñ±Ô∏è Agregar Producto al Carrito                         ‚ïë
‚ïë   [3] ‚å®Ô∏è Eliminar Producto del Carrito                       ‚ïë
‚ïë   [4] üõí Ver Carrito                                         ‚ïë
‚ïë   [5] ‚ùå Salir                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
==> Ponga una opci√≥n:
                """.trimIndent()
            )

            when (readLine()) {
                "1" -> mostrarProductos()
                "2" -> agregarProducto()
                "3" -> eliminarProducto()
                "4" -> verCarrito()
                "5" -> {
                    Vista.mostrarMensaje("Saliendo de la aplicaci√≥n.")
                    System.exit(0)
                }
                else -> Vista.mostrarMensaje("Opci√≥n no v√°lida. Intente de nuevo.\n")
            }
        }
    }
 // Muestra la lista de productos disponibles en formato de tabla
    fun mostrarProductos() {
        while (true) {
            Vista.mostrarMensaje("\nüì¶ Cat√°logo de Productos\n")

            // Encabezado de tabla
            Vista.mostrarMensaje("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
            Vista.mostrarMensaje("‚îÇ ID  ‚îÇ Producto                     ‚îÇ Precio    ‚îÇ Stock ‚îÇ")
            Vista.mostrarMensaje("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")

            // Filas de productos
            for (producto in productos) {
                Vista.mostrarMensaje(
                    String.format(
                        "‚îÇ %-3d ‚îÇ %-28s ‚îÇ $%-8.2f ‚îÇ %-5d ‚îÇ",
                        producto.id, producto.nombre, producto.precio, producto.cantidadDisponible
                    )
                )
            }

            // Cierre de tabla
            Vista.mostrarMensaje("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

            // Nueva interacci√≥n
            Vista.mostrarMensaje(
                """
¬øQu√© desea hacer?
1. Ingresar ID de producto para comprar
2. Regresar al men√∫ principal
            """.trimIndent()
            )

            when (readLine()) {
                "1" -> {
                    Vista.mostrarMensaje("Ingrese el ID del producto que desea comprar:")
                    val id = readLine()?.toIntOrNull()
                    val producto = productos.find { it.id == id }

                    if (producto != null) {
                        Vista.mostrarMensaje("Ingrese la cantidad que desea comprar:")
                        val cantidad = readLine()?.toIntOrNull()

                        if (cantidad != null && cantidad > 0) {
                            try {
                                carrito.agregarProducto(producto, cantidad)
                                Vista.mostrarMensaje("‚úî Producto agregado al carrito.")

                                // Preguntar qu√© hacer despu√©s
                                Vista.mostrarMensaje(
                                    """
Seleccione una opci√≥n:
1. Seguir comprando
2. Confirmar compra ahora
3. Regresar al men√∫
                                """.trimIndent()
                                )
                                when (readLine()) {
                                    "1" -> continue
                                    "2" -> {
                                        val factura = carrito.generarFactura()
                                        Vista.mostrarFactura(factura)
                                        carrito.limpiarCarrito()
                                        return
                                    }
                                    "3" -> return
                                    else -> Vista.mostrarMensaje("‚ö†Ô∏è Opci√≥n no v√°lida. Regresando al men√∫.")
                                }
                            } catch (e: IllegalArgumentException) {
                                Vista.mostrarMensaje("‚ùå Error: ${e.message}")
                            }
                        } else {
                            Vista.mostrarMensaje("‚ö†Ô∏è Cantidad inv√°lida.")
                        }
                    } else {
                        Vista.mostrarMensaje("‚ùå Producto no encontrado.")
                    }
                }
                "2" -> return
                else -> Vista.mostrarMensaje("‚ö†Ô∏è Opci√≥n no v√°lida.")
            }
        }
    }


    fun agregarProducto() {
        while (true) {
            Vista.mostrarMensaje("Ingrese el ID del producto que desea agregar:")
            val id = readLine()?.toIntOrNull()
            Vista.mostrarMensaje("Ingrese la cantidad que desea agregar:")
            val cantidad = readLine()?.toIntOrNull()

            if (id != null && cantidad != null) {
                val producto = productos.find { it.id == id }
                if (producto != null) {
                    try {
                        carrito.agregarProducto(producto, cantidad)
                        Vista.mostrarMensaje("‚úî Producto agregado correctamente.\n")
                    } catch (e: IllegalArgumentException) {
                        Vista.mostrarMensaje("‚ùå Error: ${e.message}\n")
                    }
                } else {
                    Vista.mostrarMensaje("‚ùå Producto no encontrado.\n")
                }
            } else {
                Vista.mostrarMensaje("‚ö†Ô∏è Entrada no v√°lida.\n")
            }

            Vista.mostrarMensaje(
                """
¬øDesea continuar?
1. Agregar otro producto
2. Regresar al men√∫ principal
                """.trimIndent()
            )

            when (readLine()) {
                "1" -> continue
                "2" -> {
                    Vista.mostrarMensaje("‚Ü© Regresando al men√∫ principal...\n")
                    return
                }
                else -> Vista.mostrarMensaje("‚ö†Ô∏è Opci√≥n no v√°lida. Regresando al men√∫ principal.\n")
            }
            return
        }
    }

    fun eliminarProducto() {
        Vista.mostrarMensaje("Ingrese el ID del producto que desea eliminar del carrito:")
        val id = readLine()?.toIntOrNull()
        if (id != null) {
            val producto = productos.find { it.id == id }
            if (producto != null) {
                try {
                    carrito.eliminarProductoPorId(producto.id)
                    Vista.mostrarMensaje("‚úî Producto eliminado correctamente.\n")
                } catch (e: IllegalArgumentException) {
                    Vista.mostrarMensaje("‚ùå Error: ${e.message}\n")
                }
            } else {
                Vista.mostrarMensaje("‚ùå Producto no encontrado.\n")
            }
        } else {
            Vista.mostrarMensaje("‚ö†Ô∏è Entrada no v√°lida.\n")
        }
        Vista.mostrarMensaje("üîô Presione 'Enter' para regresar al men√∫ principal")
        readLine()
    }

    fun verCarrito() {
        val items = carrito.mostrarCarrito()
        if (items.isEmpty()) {
            Vista.mostrarMensaje("üõí El carrito est√° vac√≠o.\n")
        } else {
            Vista.mostrarProductos(items)
        }
        while (true) {
            Vista.mostrarMensaje(
                """
Seleccione una opci√≥n:
1. Seguir comprando
2. Confirmar compra
                """.trimIndent()
            )
            when (readLine()) {
                "1" -> return
                "2" -> {
                    val factura = carrito.generarFactura()
                    Vista.mostrarFactura(factura)
                    carrito.limpiarCarrito()
                    return
                }
                else -> Vista.mostrarMensaje("‚ö†Ô∏è Opci√≥n no v√°lida.\n")
            }
        }
    }
}
